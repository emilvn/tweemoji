import Head from "next/head";
import {SignInButton, useUser} from "@clerk/nextjs";
import Image from "next/image";

import {api, type RouterOutputs} from "~/utils/api";

import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import {LoadingPage, LoadingSpinner} from "~/components/loading";
import {useState} from "react";
import toast from "react-hot-toast";
import {type NextPage} from "next";
import Link from "next/link";
dayjs.extend(relativeTime);

type PostWithAuthor = RouterOutputs["posts"]["getAll"][number];
export function PostView(props:PostWithAuthor){
    const {post, author} = props;
    return (
        <div
            key={post.id}
            className="flex p-4 border-b border-slate-400 gap-3">
            <Image
                src={author.imageUrl}
                alt={`@${author.username}'s profile picture`}
                className="w-14 h-14 rounded-full"
                width={56}
                height={56}
            />
            <div className="flex flex-col">
                <div className="flex gap-1 text-slate-300 font-bold">
					<Link href={`/@${author.username}`}>
                        <span>{`@${author.username}`}</span>
                    </Link>
                    <Link href={`/post/${post.id}`}>
                        <span className="mx-1">Â·</span>
                        <span className="font-thin">{`${dayjs(post.createdAt).fromNow()}`}</span>
                    </Link>
                </div>
                <span className="text-2xl">{post.content}</span>
            </div>
        </div>
    );
}

export function CreatePostWizard(){
    const {user} = useUser();

    const [input, setInput] = useState("");

    const ctx = api.useUtils();

    const {mutate:createPost, isLoading:isPosting} = api.posts.create.useMutation({
        onSuccess: () => {
            setInput("");
            void ctx.posts.getAll.invalidate();
        },
        onError: (e) => {
            const errorMessage = e.data?.zodError?.fieldErrors.content;
            if(errorMessage && errorMessage[0]){
                toast.error(errorMessage[0]);
            }
            else{
                toast.error("Failed to post!");
            }
        }
    });

    if(!user) return null;

    return (
        <div className="flex gap-3 w-full">
            <Image
				src={user.imageUrl}
                alt={`@${user.username}'s profile picture`}
                className="w-14 h-14 rounded-full"
                width={56}
                height={56}
            />
            <input
                placeholder="Type some emojis!"
                className="bg-transparent grow outline-none"
                type="text"
                value={input}
                onChange={(e) => setInput(e.target.value)}
                disabled={isPosting}
                onKeyDown={(e) => {
                    if(e.key === "Enter"){
                        if(input !== "") createPost({content: input});
                    }
                }}
            />
            {input !== "" && !isPosting && (
                <button
                    className="bg-slate-500 text-white rounded-md px-4 py-2"
                    onClick={() => createPost({content: input})}>Post</button>
            )}
            {isPosting && (
                <div className="flex items-center justify-center">
                    <LoadingSpinner size={20}/>
                </div>
            )}
        </div>
    );
}

function Feed(){
    const {data, isLoading:postsLoading} = api.posts.getAll.useQuery();

	if(postsLoading) return <LoadingPage />;

    if(!data) return <div>Something went wrong</div>;

    return (
        <div className="flex flex-col">
            {data?.map((fullPost) => (
                <PostView {...fullPost} key={fullPost.post.id}/>
            ))}
        </div>
    );
}

const Home:NextPage = () => {

  const {isLoaded:userLoaded, isSignedIn} = useUser();

  // start fetching ASAP
  api.posts.getAll.useQuery();

  // return empty div if user isn't loaded yet
  if(!userLoaded) return (<div />);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex justify-center h-screen">
          <div className="w-full md:max-w-2xl border-slate-400 border-x">
            <div className="flex border-b border-slate-400 p-4">
                {!isSignedIn && (
                    <div className="flex justify-center">
                        <SignInButton />
                    </div>
                )}
                {!!isSignedIn && <CreatePostWizard />}
            </div>
            <Feed />
          </div>
      </main>
    </>
  );
}

export default Home;